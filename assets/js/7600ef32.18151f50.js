"use strict";(self.webpackChunkMathOfRealTimeGraphics_samples=self.webpackChunkMathOfRealTimeGraphics_samples||[]).push([[8827],{6653:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>s,metadata:()=>c,toc:()=>p});var n=o(87462),r=(o(67294),o(3905)),a=o(72915);const s={sidebar_position:6},i="1_5_polarRot",c={unversionedId:"chapter1/1_5_polarRot",id:"chapter1/1_5_polarRot",title:"1_5_polarRot",description:"\u30b3\u30fc\u30c9 1.9, \u56f3 1.11:",source:"@site/i18n/jp/docusaurus-plugin-content-docs/current/chapter1/1_5_polarRot.md",sourceDirName:"chapter1",slug:"/chapter1/1_5_polarRot",permalink:"/MathOfRealTimeGraphics-samples/docs/chapter1/1_5_polarRot",draft:!1,tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"1_4_polar",permalink:"/MathOfRealTimeGraphics-samples/docs/chapter1/1_4_polar"},next:{title:"1_6_hsv2rgb",permalink:"/MathOfRealTimeGraphics-samples/docs/chapter1/1_6_hsv2rgb"}},l={},p=[{value:"\u30b3\u30fc\u30c9 1.9, \u56f3 1.11:",id:"\u30b3\u30fc\u30c9-19-\u56f3-111",level:2}],_={toc:p};function u(e){let{components:t,...o}=e;return(0,r.kt)("wrapper",(0,n.Z)({},_,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"1_5_polarrot"},"1_5_polarRot"),(0,r.kt)("h2",{id:"\u30b3\u30fc\u30c9-19-\u56f3-111"},"\u30b3\u30fc\u30c9 1.9, \u56f3 1.11:"),(0,r.kt)(a.Z,{fragName:"1_5_polarRot.frag",fragCode:"#version 300 es\nprecision highp float;\nout vec4 fragColor;\nuniform float u_time;\nuniform vec2 u_resolution;\nconst float PI = 3.14159265;\n\nfloat atan2(float y, float x){\n  if (x == 0.0){\n    return sign(y) * PI / 2.0;\n  } else {\n    return atan(y, x);\n  }\n}\n\nvec2 xy2pol(vec2 xy){\n  return vec2(atan2(xy.y, xy.x), length(xy));\n}\n\nvec2 pol2xy(vec2 pol){\n  return pol.y * vec2(cos(pol.x), sin(pol.x));\n}\n\nvec3 tex(vec2 st){\n  float time = 0.2 * u_time;\n  vec3 circ = vec3(pol2xy(vec2(time, 0.5)) + 0.5, 1.0);\n  vec3[3] col3 = vec3[](\n    circ.rgb, circ.gbr, circ.brg\n  );\n  st.s = st.s / PI + 1.0;\n  st.s += time;\n  int ind = int(st.s);\n  vec3 col = mix(col3[ind % 2], col3[(ind + 1) % 2], fract(st.s));\n  return mix(col3[2], col, st.t);\n}\n\nvoid main(){\n  vec2 pos = gl_FragCoord.xy / u_resolution.xy;\n  pos = 2.0 * pos - vec2(1.0);\n  pos = xy2pol(pos);    \n  fragColor = vec4(tex(pos), 1.0);\n}",mdxType:"LiveGlslCodeBlock"}))}u.isMDXComponent=!0}}]);