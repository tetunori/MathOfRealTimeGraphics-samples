"use strict";(self.webpackChunkMathOfRealTimeGraphics_samples=self.webpackChunkMathOfRealTimeGraphics_samples||[]).push([[7942],{87173:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>s,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>p,toc:()=>l});var t=r(87462),o=(r(67294),r(3905)),c=r(72915);const i={sidebar_position:3},a="9_2_morphing",p={unversionedId:"chapter9/9_2_morphing",id:"chapter9/9_2_morphing",title:"9_2_morphing",description:"Code 9.2, Figure 9.3:",source:"@site/docs/chapter9/9_2_morphing.md",sourceDirName:"chapter9",slug:"/chapter9/9_2_morphing",permalink:"/MathOfRealTimeGraphics-samples/docs/chapter9/9_2_morphing",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"9_1_boolOp2d",permalink:"/MathOfRealTimeGraphics-samples/docs/chapter9/9_1_boolOp2d"},next:{title:"9_3_smoothMin",permalink:"/MathOfRealTimeGraphics-samples/docs/chapter9/9_3_smoothMin"}},s={},l=[{value:"Code 9.2, Figure 9.3:",id:"code-92-figure-93",level:2}],v={toc:l};function d(e){let{components:n,...r}=e;return(0,o.kt)("wrapper",(0,t.Z)({},v,r,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"9_2_morphing"},"9_2_morphing"),(0,o.kt)("h2",{id:"code-92-figure-93"},"Code 9.2, Figure 9.3:"),(0,o.kt)(c.Z,{fragName:"9_2_morphing.frag",fragCode:"#version 300 es\nprecision highp float;\nprecision highp int;\nout vec4 fragColor;\nuniform float u_time;\nuniform vec2 u_resolution;\nconst float PI = 3.14159265359;\n//begin rot\nvec2 rot2(vec2 p, float t){\n    return vec2(cos(t) * p.x -sin(t) * p.y, sin(t) * p.x + cos(t) * p.y);\n}\nvec3 rotX(vec3 p, float t){\n    return vec3(p.x, rot2(p.yz, t));\n}\nvec3 rotY(vec3 p, float t){\n    return vec3(p.y, rot2(p.zx, t)).zxy;\n}\nvec3 rotZ(vec3 p, float t){\n    return vec3(rot2(p.xy, t), p.z);\n}\nvec3 euler(vec3 p, vec3 t){\n    return rotZ(rotY(rotX(p, t.x), t.y), t.z);\n}\n//end rot\nfloat sphereSDF(vec3 p, vec3 cent, float rad){\n    return length(p - cent) - rad;\n}\nfloat sceneSDF(vec3 p){\n    float t = 0.5* u_time;\n    p = euler(p, vec3(t));\n    float d1 = 1.0;\n    for (float i = 0.0; i < 6.0; i++){\n        vec3 cent = vec3(cos(PI * i / 3.0), sin(PI * i / 3.0), 0.0);\n        d1 = min(d1, sphereSDF(p, cent, 0.2));\n    }\n    float d2 = sphereSDF(p, vec3(0.0), 1.);\n    return mix(d1, d2, abs(mod(t, 2.0) - 1.0));\n}\nvec3 gradSDF(vec3 p){\n    float eps = 0.0001;\n    return normalize(vec3(\n        sceneSDF(p + vec3(eps, 0.0, 0.0)) - sceneSDF(p + vec3(-eps, 0.0, 0.0)),\n        sceneSDF(p + vec3(0.0, eps, 0.0)) - sceneSDF(p + vec3(0.0, - eps, 0.0)),\n        sceneSDF(p + vec3(0.0, 0.0, eps)) - sceneSDF(p + vec3(0.0, 0.0, - eps))\n    ));\n}\n\nvoid main(){\n    vec2 p = (gl_FragCoord.xy * 2.0 - u_resolution) / min(u_resolution.x, u_resolution.y);\n    \n    vec3 cPos = vec3(0.0, 0.0, 2.5);\n    vec3 cDir = vec3(0.0, 0.0, - 1.0);\n    vec3 cUp = vec3(0.0, 1.0, 0.0);\n    vec3 cSide = cross(cDir, cUp);\n    float targetDepth = 1.0;\n    \n    vec3 lDir = vec3(0.0, 0.0, 1.0);\n    \n    vec3 ray = cSide * p.x + cUp * p.y + cDir * targetDepth;\n    \n    vec3 rPos = cPos + ray;\n    ray = normalize(ray);\n    fragColor.rgb = vec3(0.0);\n    for(int i = 0; i < 50; i ++ ){\n        if (sceneSDF(rPos) > 0.001){\n            rPos += sceneSDF(rPos) * ray;\n        } else {\n            float amb = 0.1;\n            float diff = 0.9 * max(dot(normalize(lDir), gradSDF(rPos)), 0.0);\n            vec3 col = vec3(1.0);\n            fragColor.rgb = col * (diff + amb);\n            break;\n        }\n    }\n    fragColor.a = 1.0;\n}",mdxType:"LiveGlslCodeBlock"}))}d.isMDXComponent=!0}}]);