"use strict";(self.webpackChunkMathOfRealTimeGraphics_samples=self.webpackChunkMathOfRealTimeGraphics_samples||[]).push([[9483],{80684:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>s,default:()=>u,frontMatter:()=>c,metadata:()=>p,toc:()=>l});var r=t(87462),o=(t(67294),t(3905)),a=t(72915);const c={sidebar_position:15},s="9_10_norm",p={unversionedId:"chapter9/9_10_norm",id:"chapter9/9_10_norm",title:"9_10_norm",description:"\u30b3\u30fc\u30c9 9.11, \u56f3 9.16:",source:"@site/i18n/jp/docusaurus-plugin-content-docs/current/chapter9/9_10_norm.md",sourceDirName:"chapter9",slug:"/chapter9/9_10_norm",permalink:"/MathOfRealTimeGraphics-samples/docs/chapter9/9_10_norm",draft:!1,tags:[],version:"current",sidebarPosition:15,frontMatter:{sidebar_position:15},sidebar:"tutorialSidebar",previous:{title:"9_9_dist",permalink:"/MathOfRealTimeGraphics-samples/docs/chapter9/9_9_dist"},next:{title:"\u8aa4\u690d",permalink:"/MathOfRealTimeGraphics-samples/docs/errata"}},i={},l=[{value:"\u30b3\u30fc\u30c9 9.11, \u56f3 9.16:",id:"\u30b3\u30fc\u30c9-911-\u56f3-916",level:2}],v={toc:l};function u(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,r.Z)({},v,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"9_10_norm"},"9_10_norm"),(0,o.kt)("h2",{id:"\u30b3\u30fc\u30c9-911-\u56f3-916"},"\u30b3\u30fc\u30c9 9.11, \u56f3 9.16:"),(0,o.kt)(a.Z,{fragName:"9_10_norm.frag",fragCode:"#version 300 es\nprecision highp float;\nprecision highp int;\nout vec4 fragColor;\nuniform float u_time;\nuniform vec2 u_resolution;\n\n//begin rot\nvec2 rot2(vec2 p, float t){\n  return vec2(cos(t) * p.x -sin(t) * p.y, sin(t) * p.x + cos(t) * p.y);\n}\n\nvec3 rotX(vec3 p, float t){\n  return vec3(p.x, rot2(p.yz, t));\n}\n\nvec3 rotY(vec3 p, float t){\n  return vec3(p.y, rot2(p.zx, t)).zxy;\n}\n\nvec3 rotZ(vec3 p, float t){\n  return vec3(rot2(p.xy, t), p.z);\n}\n\nvec3 euler(vec3 p, vec3 t){\n  return rotZ(rotY(rotX(p, t.x), t.y), t.z);\n}\n//end rot\n\nfloat kyoto(vec3 p){\n  float scale = 1.0;\n  return scale * (abs(p.x) + abs(p.y) + abs(p.z));\n}\n\nfloat shogi(vec3 p){\n  float scale =1.;\n  return scale * max(max(abs(p.x), abs(p.y)), abs(p.z));\n}\n\nfloat euc(vec3 p){\n  float scale = 1.0;\n  return scale * length(p);\n}\n\nfloat length_(vec3 p){\n  float time = u_time * 0.2;\n  float v0, v1;\n  if (int(time) % 3 == 0){\n    v0 = euc(p);\n    v1 = shogi(p);\n  } else if (int(time) % 3 == 1){\n    v0 = shogi(p);\n    v1 = kyoto(p);\n  } else {\n    v0 = kyoto(p);\n    v1 = euc(p);\n  }\n  return mix(v0, v1, smoothstep(0.25, 0.75, fract(time)));\n}\n\nfloat length2(vec3 p){\n  p = abs(p);\n  float d = 4.0 * sin(0.5 * u_time) + 5.0;\n  return pow(pow(p.x, d) + pow(p.y, d) + pow(p.z, d), 1.0 / d);\n}\n\nfloat sphereSDF(vec3 p){\n  return length2(p) - 0.5;\n}\n\nfloat sceneSDF(vec3 p){\n  return sphereSDF(p);\n}\n\nvec3 gradSDF(vec3 p){\n  float eps = 0.001;\n  return normalize(vec3(\n    sceneSDF(p + vec3(eps, 0.0, 0.0)) - sceneSDF(p - vec3(eps, 0.0, 0.0)),\n    sceneSDF(p + vec3(0.0, eps, 0.0)) - sceneSDF(p - vec3(0.0, eps, 0.0)),\n    sceneSDF(p + vec3(0.0, 0.0, eps)) - sceneSDF(p - vec3(0.0, 0.0, eps))\n  ));\n}\n\nvoid main(){\n  vec2 p = (gl_FragCoord.xy * 2.0 - u_resolution) / min(u_resolution.x, u_resolution.y);\n  \n  vec3 t = vec3(u_time * 0.3);\n  vec3 cPos = euler(vec3(0.0, 0.0, 2.0), t);\n  vec3 cDir = euler(vec3(0.0, 0.0, - 1.0), t);\n  vec3 cUp = euler(vec3(0.0, 1.0, 0.0), t);\n  vec3 cSide = cross(cDir, cUp);\n  \n  float targetDepth = 1.0;\n  \n  vec3 lDir = euler(vec3(0.0, 0.0, 1.0), t);\n  \n  vec3 ray = cSide * p.x + cUp * p.y + cDir * targetDepth;\n  vec3 rPos = ray + cPos;\n  ray = ray / length2(ray);\n  fragColor.rgb = vec3(0.0);\n  for(int i = 0; i < 50; i ++ ){\n    if (sceneSDF(rPos) > 0.001){\n      rPos += sceneSDF(rPos) * ray;\n    } else {\n      float amb = 0.1;\n      float diff = 0.9 * max(dot(normalize(lDir), gradSDF(rPos)), 0.0);\n      vec3 col = vec3(0.0, 1.0, 1.0);\n      fragColor.rgb = col * (diff + amb);\n      break;\n    }\n  }\n  fragColor.a = 1.0;\n}",mdxType:"LiveGlslCodeBlock"}))}u.isMDXComponent=!0}}]);