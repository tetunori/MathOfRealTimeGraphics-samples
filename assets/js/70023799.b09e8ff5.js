"use strict";(self.webpackChunkMathOfRealTimeGraphics_samples=self.webpackChunkMathOfRealTimeGraphics_samples||[]).push([[9283],{6739:(n,t,e)=>{e.r(t),e.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>p,frontMatter:()=>o,metadata:()=>u,toc:()=>l});var i=e(87462),a=(e(67294),e(3905)),s=e(72915);const o={sidebar_position:1},r="6_0_fdist",u={unversionedId:"chapter6/6_0_fdist",id:"chapter6/6_0_fdist",title:"6_0_fdist",description:"\u30b3\u30fc\u30c9 6.1, \u56f3 6.1:",source:"@site/i18n/jp/docusaurus-plugin-content-docs/current/chapter6/6_0_fdist.md",sourceDirName:"chapter6",slug:"/chapter6/6_0_fdist",permalink:"/MathOfRealTimeGraphics-samples/docs/chapter6/6_0_fdist",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Chapter 6: Cellular Noise",permalink:"/MathOfRealTimeGraphics-samples/docs/category/chapter-6-cellular-noise"},next:{title:"6_1_fdistImproved",permalink:"/MathOfRealTimeGraphics-samples/docs/chapter6/6_1_fdistImproved"}},c={},l=[{value:"\u30b3\u30fc\u30c9 6.1, \u56f3 6.1:",id:"\u30b3\u30fc\u30c9-61-\u56f3-61",level:2}],f={toc:l};function p(n){let{components:t,...e}=n;return(0,a.kt)("wrapper",(0,i.Z)({},f,e,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"6_0_fdist"},"6_0_fdist"),(0,a.kt)("h2",{id:"\u30b3\u30fc\u30c9-61-\u56f3-61"},"\u30b3\u30fc\u30c9 6.1, \u56f3 6.1:"),(0,a.kt)(s.Z,{fragName:"6_0_fdist.frag",fragCode:"#version 300 es\nprecision highp float;\nprecision highp int;\nout vec4 fragColor;\nuniform float u_time;\nuniform vec2 u_resolution;\n//start hash\nuvec3 k = uvec3(0x456789abu, 0x6789ab45u, 0x89ab4567u);\nuvec3 u = uvec3(1, 2, 3);\nconst uint UINT_MAX = 0xffffffffu;\nuint uhash11(uint n){\n    n ^= (n << u.x);\n    n ^= (n >> u.x);\n    n *= k.x;\n    n ^= (n << u.x);\n    return n * k.x;\n}\nuvec2 uhash22(uvec2 n){\n    n ^= (n.yx << u.xy);\n    n ^= (n.yx >> u.xy);\n    n *= k.xy;\n    n ^= (n.yx << u.xy);\n    return n * k.xy;\n}\nuvec3 uhash33(uvec3 n){\n    n ^= (n.yzx << u);\n    n ^= (n.yzx >> u);\n    n *= k;\n    n ^= (n.yzx << u);\n    return n * k;\n}\nfloat hash11(float p){\n    uint n = floatBitsToUint(p);\n    return float(uhash11(n)) / float(UINT_MAX);\n}\nfloat hash21(vec2 p){\n    uvec2 n = floatBitsToUint(p);\n    return float(uhash22(n).x) / float(UINT_MAX);\n}\nfloat hash31(vec3 p){\n    uvec3 n = floatBitsToUint(p);\n    return float(uhash33(n).x) / float(UINT_MAX);\n}\nvec2 hash22(vec2 p){\n    uvec2 n = floatBitsToUint(p);\n    return vec2(uhash22(n)) / vec2(UINT_MAX);\n}\nvec3 hash33(vec3 p){\n    uvec3 n = floatBitsToUint(p);\n    return vec3(uhash33(n)) / vec3(UINT_MAX);\n}\n//end hash\nfloat fdist(vec2 p){\n    vec2 n = floor(p + 0.5);\n    float dist = sqrt(2.0);\n    for(float j = - 2.0; j <= 2.0; j ++ ){\n        for(float i = - 2.0; i <= 2.0; i ++ ){\n            vec2 glid = n + vec2(i, j);\n            vec2 jitter = sin(u_time) * (hash22(glid) - 0.5);\n            dist = min(dist, distance(glid + jitter, p));\n        }\n    }\n    return dist;\n}\nvoid main(){\n    vec2 pos = gl_FragCoord.xy/ min(u_resolution.x, u_resolution.y);\n    pos *= 10.0;\n    pos += u_time;\n    fragColor = vec4(fdist(pos));\n    fragColor.a = 1.0;\n}\n",mdxType:"LiveGlslCodeBlock"}))}p.isMDXComponent=!0}}]);