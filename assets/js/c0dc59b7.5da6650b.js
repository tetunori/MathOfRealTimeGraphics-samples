"use strict";(self.webpackChunkMathOfRealTimeGraphics_samples=self.webpackChunkMathOfRealTimeGraphics_samples||[]).push([[3538],{39062:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>c,default:()=>g,frontMatter:()=>a,metadata:()=>p,toc:()=>l});var o=r(87462),n=(r(67294),r(3905)),i=r(72915);const a={sidebar_position:3},c="8_1_texMapping",p={unversionedId:"chapter8/8_1_texMapping",id:"chapter8/8_1_texMapping",title:"8_1_texMapping",description:"Code 8.4, 8.5, Figure 8.4:",source:"@site/docs/chapter8/8_1_texMapping.md",sourceDirName:"chapter8",slug:"/chapter8/8_1_texMapping",permalink:"/MathOfRealTimeGraphics-samples/docs/chapter8/8_1_texMapping",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Exercise 8.1",permalink:"/MathOfRealTimeGraphics-samples/docs/chapter8/exercise_8_1"},next:{title:"8_2_lighting",permalink:"/MathOfRealTimeGraphics-samples/docs/chapter8/8_2_lighting"}},s={},l=[{value:"Code 8.4, 8.5, Figure 8.4:",id:"code-84-85-figure-84",level:2}],u={toc:l};function g(e){let{components:t,...r}=e;return(0,n.kt)("wrapper",(0,o.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"8_1_texmapping"},"8_1_texMapping"),(0,n.kt)("h2",{id:"code-84-85-figure-84"},"Code 8.4, 8.5, Figure 8.4:"),(0,n.kt)(i.Z,{fragName:"8_1_texMapping.frag",fragCode:"#version 300 es\nprecision highp float;\nprecision highp int;\nout vec4 fragColor;\nuniform float u_time;\nuniform vec2 u_resolution;\nuniform vec2 u_mouse;\nconst float PI = 3.14159265359;\n//begin rot\nvec2 rot2(vec2 p, float t){\n    return vec2(cos(t) * p.x -sin(t) * p.y, sin(t) * p.x + cos(t) * p.y);\n}\nvec3 rotX(vec3 p, float t){\n    return vec3(p.x, rot2(p.yz, t));\n}\nvec3 rotY(vec3 p, float t){\n    return vec3(p.y, rot2(p.zx, t)).zxy;\n}\nvec3 rotZ(vec3 p, float t){\n    return vec3(rot2(p.xy, t), p.z);\n}\n//end rot\nfloat text(vec2 st){\n    return mod(floor(st.s) + floor(st.t), 2.0);\n}\nvoid main(){\n    vec2 p = (gl_FragCoord.xy * 2.0 - u_resolution) / min(u_resolution.x, u_resolution.y);\n    vec3 cPos = vec3(0.0, 0.0, 0.0);\n    float t = -0.5 * PI * (u_mouse.y / u_resolution.y);\n    vec3 cDir = rotX(vec3(0.0, 0.0, - 1.0), t);\n    vec3 cUp = rotX(vec3(0.0, 1.0, 0.0), t);\n    vec3 cSide = cross(cDir, cUp);\n    float targetDepth = 1.0;\n    vec3 ray = cSide * p.x + cUp * p.y + cDir * targetDepth - cPos;\n    ray = normalize(ray);\n    vec3 groundNormal = vec3(0.0, 1.0, 0.0);\n    float groundHeight = 1.0 + (u_mouse.x / u_resolution.x);\n    if (dot(ray, groundNormal) < 0.0){\n        vec3 hit = cPos - ray * groundHeight / dot(ray, groundNormal);\n        fragColor.rgb = vec3(text(hit.zx));\n    } else {\n        fragColor.rgb = vec3(0.0);\n    }\n    fragColor.a = 1.0;\n}",mdxType:"LiveGlslCodeBlock"}))}g.isMDXComponent=!0}}]);