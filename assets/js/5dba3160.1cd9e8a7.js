"use strict";(self.webpackChunkMathOfRealTimeGraphics_samples=self.webpackChunkMathOfRealTimeGraphics_samples||[]).push([[774],{11051:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>f,contentTitle:()=>s,default:()=>l,frontMatter:()=>a,metadata:()=>c,toc:()=>u});var t=i(87462),o=(i(67294),i(3905)),r=i(72915);const a={sidebar_position:2},s="\u554f\u984c 3.1",c={unversionedId:"chapter3/exercise_3_1",id:"chapter3/exercise_3_1",title:"\u554f\u984c 3.1",description:"",source:"@site/i18n/jp/docusaurus-plugin-content-docs/current/chapter3/exercise_3_1.md",sourceDirName:"chapter3",slug:"/chapter3/exercise_3_1",permalink:"/MathOfRealTimeGraphics-samples/docs/chapter3/exercise_3_1",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"3_0_vnoise",permalink:"/MathOfRealTimeGraphics-samples/docs/chapter3/3_0_vnoise"},next:{title:"\u554f\u984c 3.2",permalink:"/MathOfRealTimeGraphics-samples/docs/chapter3/exercise_3_2"}},f={},u=[],p={toc:u};function l(n){let{components:e,...i}=n;return(0,o.kt)("wrapper",(0,t.Z)({},p,i,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"\u554f\u984c-31"},"\u554f\u984c 3.1"),(0,o.kt)(r.Z,{fragName:"exercise_3_1.frag",fragCode:"#version 300 es\nprecision highp float;\nprecision highp int;\nout vec4 fragColor;\nuniform float u_time;\nuniform vec2 u_resolution;\nint channel;\n\n//start hash\nuvec3 k = uvec3(0x456789abu, 0x6789ab45u, 0x89ab4567u);\nuvec3 u = uvec3(1, 2, 3);\nconst uint UINT_MAX = 0xffffffffu;\nuvec2 uhash22(uvec2 n){\n    n ^= (n.yx << u.xy);\n    n ^= (n.yx >> u.xy);\n    n *= k.xy;\n    n ^= (n.yx << u.xy);\n    return n * k.xy;\n}\nuvec3 uhash33(uvec3 n){\n    n ^= (n.yzx << u);\n    n ^= (n.yzx >> u);\n    n *= k;\n    n ^= (n.yzx << u);\n    return n * k;\n}\n\nfloat hash21(vec2 p){\n    uvec2 n = floatBitsToUint(p);\n    return float(uhash22(n).x) / float(UINT_MAX);\n}\nfloat hash31(vec3 p){\n    uvec3 n = floatBitsToUint(p);\n    return float(uhash33(n).x) / float(UINT_MAX);\n}\n//end hash\n\n\nfloat vnoise21(vec2 p, float l){\n    vec2 n = floor(p);\n    float[4] v;\n    for (int j = 0; j < 2; j ++){\n        for (int i = 0; i < 2; i++){\n            v[i+2*j] = hash21(n + l + vec2(i, j));\n        }\n    }\n    vec2 f = fract(p);\n    f = f * f * (3.0 -2.0 * f); // Hermite interpolation\n    return mix(mix(v[0], v[1], f[0]), mix(v[2], v[3], f[0]), f[1]);\n}\n\nvec3 vnoise23(vec2 p){     \n    return vec3(vnoise21(p, 12.0), vnoise21(p, 34.0), vnoise21(p, 56.0));\n}\n\nfloat vnoise31(vec3 p, float l){\n    vec3 n = floor(p);\n    float[8] v;\n    for (int k = 0; k < 2; k++ ){\n        for (int j = 0; j < 2; j++ ){\n            for (int i = 0; i < 2; i++){\n                v[i+2*j+4*k] = hash31(n + l + vec3(i, j, k));\n            }\n        }\n    }\n    vec3 f = fract(p);\n    f = f * f * (3.0 - 2.0 * f); // Hermite interpolation\n    float[2] w;\n    for (int i = 0; i < 2; i++){\n        w[i] = mix(mix(v[4*i], v[4*i+1], f[0]), mix(v[4*i+2], v[4*i+3], f[0]), f[1]);\n    }\n    return mix(w[0], w[1], f[2]);\n}\n\nvec3 vnoise33(vec3 p){     \n    return vec3(vnoise31(p, 98.0), vnoise31(p, 76.0), vnoise31(p, 54.0));\n}\n\nvoid main(){\n    vec2 pos = gl_FragCoord.xy/min(u_resolution.x, u_resolution.y);\n    channel = int(gl_FragCoord.x * 2.0 / u_resolution.x);\n    pos = 10.0 * pos + u_time;\n    if (channel < 1){\n      fragColor = vec4(vnoise23(pos), 1.0);\n    } else {\n      fragColor = vec4(vnoise33(vec3(pos, u_time)), 1.0);\n    }\n}",mdxType:"LiveGlslCodeBlock"}))}l.isMDXComponent=!0}}]);