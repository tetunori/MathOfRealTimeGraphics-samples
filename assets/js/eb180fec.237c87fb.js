"use strict";(self.webpackChunkMathOfRealTimeGraphics_samples=self.webpackChunkMathOfRealTimeGraphics_samples||[]).push([[8947],{5478:(n,t,e)=>{e.r(t),e.d(t,{assets:()=>f,contentTitle:()=>s,default:()=>p,frontMatter:()=>a,metadata:()=>c,toc:()=>u});var o=e(87462),i=(e(67294),e(3905)),r=e(72915);const a={sidebar_position:3},s="4_2_rotNoise",c={unversionedId:"chapter4/4_2_rotNoise",id:"chapter4/4_2_rotNoise",title:"4_2_rotNoise",description:"\u30b3\u30fc\u30c9 4.3, 4.4:",source:"@site/i18n/jp/docusaurus-plugin-content-docs/current/chapter4/4_2_rotNoise.md",sourceDirName:"chapter4",slug:"/chapter4/4_2_rotNoise",permalink:"/MathOfRealTimeGraphics-samples/docs/chapter4/4_2_rotNoise",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"4_1_noiseRange",permalink:"/MathOfRealTimeGraphics-samples/docs/chapter4/4_1_noiseRange"},next:{title:"4_3_noiseQuality",permalink:"/MathOfRealTimeGraphics-samples/docs/chapter4/4_3_noiseQuality"}},f={},u=[{value:"\u30b3\u30fc\u30c9 4.3, 4.4:",id:"\u30b3\u30fc\u30c9-43-44",level:2}],l={toc:u};function p(n){let{components:t,...e}=n;return(0,i.kt)("wrapper",(0,o.Z)({},l,e,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"4_2_rotnoise"},"4_2_rotNoise"),(0,i.kt)("h2",{id:"\u30b3\u30fc\u30c9-43-44"},"\u30b3\u30fc\u30c9 4.3, 4.4:"),(0,i.kt)(r.Z,{fragName:"4_2_rotNoise.frag",fragCode:"#version 300 es\nprecision highp float;\nprecision highp int;\nout vec4 fragColor;\nuniform float u_time;\nuniform vec2 u_resolution;\nint channel;\nconst float PI = 3.1415926;\n\n//start hash\nuvec3 k = uvec3(0x456789abu, 0x6789ab45u, 0x89ab4567u);\nuvec3 u = uvec3(1, 2, 3);\nconst uint UINT_MAX = 0xffffffffu;\n\nuint uhash11(uint n){\n  n ^= (n << u.x);\n  n ^= (n >> u.x);\n  n *= k.x;\n  n ^= (n << u.x);\n  return n * k.x;\n}\n\nuvec2 uhash22(uvec2 n){\n  n ^= (n.yx << u.xy);\n  n ^= (n.yx >> u.xy);\n  n *= k.xy;\n  n ^= (n.yx << u.xy);\n  return n * k.xy;\n}\n\nuvec3 uhash33(uvec3 n){\n  n ^= (n.yzx << u);\n  n ^= (n.yzx >> u);\n  n *= k;\n  n ^= (n.yzx << u);\n  return n * k;\n}\n\nfloat hash11(float p){\n  uint n = floatBitsToUint(p);\n  return float(uhash11(n)) / float(UINT_MAX);\n}\n\nfloat hash21(vec2 p){\n  uvec2 n = floatBitsToUint(p);\n  return float(uhash22(n).x) / float(UINT_MAX);\n}\n\nfloat hash31(vec3 p){\n  uvec3 n = floatBitsToUint(p);\n  return float(uhash33(n).x) / float(UINT_MAX);\n}\n\nvec2 hash22(vec2 p){\n  uvec2 n = floatBitsToUint(p);\n  return vec2(uhash22(n)) / vec2(UINT_MAX);\n}\n\nvec3 hash33(vec3 p){\n  uvec3 n = floatBitsToUint(p);\n  return vec3(uhash33(n)) / vec3(UINT_MAX);\n}\n//end hash\n\n\n//begin rot\nvec2 rot2(vec2 p, float t){\n  return vec2(cos(t) * p.x -sin(t) * p.y, sin(t) * p.x + cos(t) * p.y);\n}\n\nvec3 rotX(vec3 p, float t){\n  p.yz = rot2(p.yz, t);\n  return p;\n}\n\nvec3 rotY(vec3 p, float t){\n  p.xz = rot2(p.xz, t);\n  return p;\n}\n\nvec3 rotZ(vec3 p, float t){\n  p.xy = rot2(p.xy, t);\n  return p;\n}\n//end rot\n\nfloat rotNoise21(vec2 p, float ang){\n  vec2 n = floor(p);\n  vec2 f = fract(p);\n  float[4] v;\n  for (int j = 0; j < 2; j ++){\n    for (int i = 0; i < 2; i++){\n      vec2 g = normalize(hash22(n + vec2(i,j)) - vec2(0.5));\n      g = rot2(g, ang);\n      v[i+2*j] = dot(g, f - vec2(i, j));\n    }\n  }\n  f = f * f * f * (10.0 - 15.0 * f + 6.0 * f * f);\n  return 0.5 * mix(mix(v[0], v[1], f[0]), mix(v[2], v[3], f[0]), f[1]) + 0.5;\n}\n\nfloat rotNoise31(vec3 p, float ang){\n  vec3 n = floor(p);\n  vec3 f = fract(p);\n  float[8] v;\n  for (int k = 0; k < 2; k++ ){\n    for (int j = 0; j < 2; j++ ){\n      for (int i = 0; i < 2; i++){\n        vec3 g = normalize(hash33(n + vec3(i, j, k)) - vec3(0.5));\n        g = rotZ(g, ang);\n        v[i+2*j+4*k] = dot(g, f - vec3(i, j, k));\n      }\n    }\n  }\n  f = f * f * f * (10.0 - 15.0 * f + 6.0 * f * f);\n  float[2] w;\n  for (int i = 0; i < 2; i++){\n    w[i] = mix(mix(v[4*i], v[4*i+1], f[0]), mix(v[4*i+2], v[4*i+3], f[0]), f[1]);\n  }\n  return 0.5 * mix(w[0], w[1], f[2]) + 0.5;\n}\n\nvoid main(){\n  vec2 pos = gl_FragCoord.xy/min(u_resolution.x, u_resolution.y);\n  channel = int(gl_FragCoord.x * 2.0 / u_resolution.x);\n  pos = 10.0 * pos + u_time;\n  if (channel < 1){\n    fragColor = vec4(rotNoise21(pos, u_time));  //right\n  } else {\n    fragColor = vec4(rotNoise31(vec3(pos, u_time), u_time));\n  }\n  fragColor.a = 1.0;\n}",mdxType:"LiveGlslCodeBlock"}))}p.isMDXComponent=!0}}]);