"use strict";(self.webpackChunkMathOfRealTimeGraphics_samples=self.webpackChunkMathOfRealTimeGraphics_samples||[]).push([[4386],{6343:(n,t,e)=>{e.r(t),e.d(t,{assets:()=>d,contentTitle:()=>r,default:()=>f,frontMatter:()=>a,metadata:()=>l,toc:()=>u});var i=e(87462),s=(e(67294),e(3905)),o=e(72915);const a={sidebar_position:2},r="6_1_fdistImproved",l={unversionedId:"chapter6/6_1_fdistImproved",id:"chapter6/6_1_fdistImproved",title:"6_1_fdistImproved",description:"\u30b3\u30fc\u30c9 6.2:",source:"@site/i18n/jp/docusaurus-plugin-content-docs/current/chapter6/6_1_fdistImproved.md",sourceDirName:"chapter6",slug:"/chapter6/6_1_fdistImproved",permalink:"/MathOfRealTimeGraphics-samples/docs/chapter6/6_1_fdistImproved",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"6_0_fdist",permalink:"/MathOfRealTimeGraphics-samples/docs/chapter6/6_0_fdist"},next:{title:"6_2_fdistGrad",permalink:"/MathOfRealTimeGraphics-samples/docs/chapter6/6_2_fdistGrad"}},d={},u=[{value:"\u30b3\u30fc\u30c9 6.2:",id:"\u30b3\u30fc\u30c9-62",level:2}],c={toc:u};function f(n){let{components:t,...e}=n;return(0,s.kt)("wrapper",(0,i.Z)({},c,e,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"6_1_fdistimproved"},"6_1_fdistImproved"),(0,s.kt)("h2",{id:"\u30b3\u30fc\u30c9-62"},"\u30b3\u30fc\u30c9 6.2:"),(0,s.kt)(o.Z,{fragName:"6_1_fdistImproved.frag",fragCode:"#version 300 es\nprecision highp float;\nprecision highp int;\nout vec4 fragColor;\nuniform float u_time;\nuniform vec2 u_resolution;\nint channel;\n//start hash\nuvec3 k = uvec3(0x456789abu, 0x6789ab45u, 0x89ab4567u);\nuvec3 u = uvec3(1, 2, 3);\nconst uint UINT_MAX = 0xffffffffu;\nuint uhash11(uint n){\n    n ^= (n << u.x);\n    n ^= (n >> u.x);\n    n *= k.x;\n    n ^= (n << u.x);\n    return n * k.x;\n}\nuvec2 uhash22(uvec2 n){\n    n ^= (n.yx << u.xy);\n    n ^= (n.yx >> u.xy);\n    n *= k.xy;\n    n ^= (n.yx << u.xy);\n    return n * k.xy;\n}\nuvec3 uhash33(uvec3 n){\n    n ^= (n.yzx << u);\n    n ^= (n.yzx >> u);\n    n *= k;\n    n ^= (n.yzx << u);\n    return n * k;\n}\nfloat hash11(float p){\n    uint n = floatBitsToUint(p);\n    return float(uhash11(n)) / float(UINT_MAX);\n}\nfloat hash21(vec2 p){\n    uvec2 n = floatBitsToUint(p);\n    return float(uhash22(n).x) / float(UINT_MAX);\n}\nfloat hash31(vec3 p){\n    uvec3 n = floatBitsToUint(p);\n    return float(uhash33(n).x) / float(UINT_MAX);\n}\nvec2 hash22(vec2 p){\n    uvec2 n = floatBitsToUint(p);\n    return vec2(uhash22(n)) / vec2(UINT_MAX);\n}\nvec3 hash33(vec3 p){\n    uvec3 n = floatBitsToUint(p);\n    return vec3(uhash33(n)) / vec3(UINT_MAX);\n}\n//end hash\nfloat fdist21(vec2 p){\n    vec2 n = floor(p + 0.5);\n    float dist = sqrt(2.0);\n    for(float j = 0.0; j <= 2.0; j ++ ){\n        vec2 glid;\n        glid.y = n.y + sign(mod(j, 2.0) - 0.5) * ceil(j * 0.5);\n        if (abs(glid.y - p.y) - 0.5 > dist){\n            continue;\n        }\n        for(float i = -1.0; i <= 1.0; i ++ ){\n            glid.x = n.x + i;\n            vec2 jitter = hash22(glid) - 0.5;\n            dist = min(dist, length(glid + jitter - p));\n        }\n    }\n    return dist;\n}\nfloat fdist31(vec3 p){\n    vec3 n = floor(p + 0.5);\n    float dist = sqrt(3.0);\n    for(float k = 0.0; k <= 2.0; k ++ ){\n            vec3 glid;\n            glid.z = n.z + sign(mod(k, 2.0) - 0.5) * ceil(k * 0.5);\n            if (abs(glid.z - p.z) - 0.5 > dist){\n                continue;\n            }\n        for(float j = 0.0; j <= 2.0; j ++ ){\n            glid.y = n.y + sign(mod(j, 2.0) - 0.5) * ceil(j * 0.5);\n            if (abs(glid.y - p.y) - 0.5 > dist){\n                continue;\n            }\n            for(float i = -1.0; i <= 1.0; i ++ ){\n                glid.x = n.x + i;\n                vec3 jitter = hash33(glid) - 0.5;\n                dist = min(dist, length(glid + jitter - p));\n            }\n        }\n    }\n    return dist;\n}\nvoid main(){\n    vec2 pos = gl_FragCoord.xy/ min(u_resolution.x, u_resolution.y);\n    channel = int(2.0 * gl_FragCoord.x/ u_resolution.x); \n    pos *= 10.0;\n    pos += u_time;\n    fragColor = channel == 0 ? vec4(fdist21(pos)) : vec4(fdist31(vec3(pos, u_time)));\n    fragColor.a = 1.0;\n}\n",mdxType:"LiveGlslCodeBlock"}))}f.isMDXComponent=!0}}]);