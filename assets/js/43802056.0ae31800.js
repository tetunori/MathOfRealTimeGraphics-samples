"use strict";(self.webpackChunkMathOfRealTimeGraphics_samples=self.webpackChunkMathOfRealTimeGraphics_samples||[]).push([[6473],{53310:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>a,default:()=>d,frontMatter:()=>s,metadata:()=>i,toc:()=>l});var r=n(87462),o=(n(67294),n(3905)),c=n(72915);const s={sidebar_position:14},a="9_9_dist",i={unversionedId:"chapter9/9_9_dist",id:"chapter9/9_9_dist",title:"9_9_dist",description:"Code 9.10:",source:"@site/docs/chapter9/9_9_dist.md",sourceDirName:"chapter9",slug:"/chapter9/9_9_dist",permalink:"/MathOfRealTimeGraphics-samples/docs/chapter9/9_9_dist",draft:!1,tags:[],version:"current",sidebarPosition:14,frontMatter:{sidebar_position:14},sidebar:"tutorialSidebar",previous:{title:"Exercise 9.3-2",permalink:"/MathOfRealTimeGraphics-samples/docs/chapter9/exercise_9_3-2"},next:{title:"9_10_norm",permalink:"/MathOfRealTimeGraphics-samples/docs/chapter9/9_10_norm"}},p={},l=[{value:"Code 9.10:",id:"code-910",level:2}],v={toc:l};function d(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},v,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"9_9_dist"},"9_9_dist"),(0,o.kt)("h2",{id:"code-910"},"Code 9.10:"),(0,o.kt)(c.Z,{fragName:"9_9_dist.frag",fragCode:"#version 300 es\nprecision highp float;\nprecision highp int;\nout vec4 fragColor;\nuniform float u_time;\nuniform vec2 u_resolution;\n//begin rot\nvec2 rot2(vec2 p, float t){\n    return vec2(cos(t) * p.x -sin(t) * p.y, sin(t) * p.x + cos(t) * p.y);\n}\nvec3 rotX(vec3 p, float t){\n    return vec3(p.x, rot2(p.yz, t));\n}\nvec3 rotY(vec3 p, float t){\n    return vec3(p.y, rot2(p.zx, t)).zxy;\n}\nvec3 rotZ(vec3 p, float t){\n    return vec3(rot2(p.xy, t), p.z);\n}\nvec3 euler(vec3 p, vec3 t){\n    return rotZ(rotY(rotX(p, t.x), t.y), t.z);\n}\n//end rot\nfloat kyoto(vec3 p){\n    return abs(p.x) + abs(p.y) + abs(p.z);\n}\nfloat shogi(vec3 p){\n    return max(max(abs(p.x), abs(p.y)), abs(p.z));\n}\nfloat euc(vec3 p){\n    return length(p);\n}\nfloat length2(vec3 p){\n    float t = u_time * 0.2;\n    float[3] v = float[](euc(p), shogi(p), kyoto(p));\n    return mix(v[int(t) % 3], v[(int(t) + 1) % 3], smoothstep(0.25, 0.75, fract(t)));\n}\nfloat sphereSDF(vec3 p){\n    return length2(p) - 0.5;\n}\nfloat sceneSDF(vec3 p){\n    return sphereSDF(p);\n}\n\nvec3 gradSDF(vec3 p){\n    float eps = 0.001;\n    return normalize(vec3(\n        sceneSDF(p + vec3(eps, 0.0, 0.0)) - sceneSDF(p - vec3(eps, 0.0, 0.0)),\n        sceneSDF(p + vec3(0.0, eps, 0.0)) - sceneSDF(p - vec3(0.0, eps, 0.0)),\n        sceneSDF(p + vec3(0.0, 0.0, eps)) - sceneSDF(p - vec3(0.0, 0.0, eps))\n    ));\n}\nvoid main(){\n    vec2 p = (gl_FragCoord.xy * 2.0 - u_resolution) / min(u_resolution.x, u_resolution.y);\n    \n    vec3 t = vec3(u_time * 0.3);\n    vec3 cPos = euler(vec3(0.0, 0.0, 2.0), t);\n    vec3 cDir = euler(vec3(0.0, 0.0, - 1.0), t);\n    vec3 cUp = euler(vec3(0.0, 1.0, 0.0), t);\n    vec3 cSide = cross(cDir, cUp);\n    \n    float targetDepth = 1.0;\n    \n    vec3 lDir = euler(vec3(0.0, 0.0, 1.0), t);\n    \n    vec3 ray = cSide * p.x + cUp * p.y + cDir * targetDepth;\n    vec3 rPos = ray + cPos;\n    ray = ray / length2(ray);\n    fragColor.rgb = vec3(0.0);\n    for(int i = 0; i < 50; i ++ ){\n        if (sceneSDF(rPos) > 0.001){\n            rPos += sceneSDF(rPos) * ray;\n        } else {\n            float amb = 0.1;\n            float diff = 0.9 * max(dot(normalize(lDir), gradSDF(rPos)), 0.0);\n            vec3 col = vec3(0.0, 1.0, 1.0);\n            fragColor.rgb = col * (diff + amb);\n            break;\n        }\n    }\n    fragColor.a = 1.0;\n}",mdxType:"LiveGlslCodeBlock"}))}d.isMDXComponent=!0}}]);