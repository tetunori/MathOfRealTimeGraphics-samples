"use strict";(self.webpackChunkMathOfRealTimeGraphics_samples=self.webpackChunkMathOfRealTimeGraphics_samples||[]).push([[3543],{37554:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>u,contentTitle:()=>s,default:()=>v,frontMatter:()=>r,metadata:()=>c,toc:()=>p});var a=t(87462),i=(t(67294),t(3905)),o=t(72915);const r={sidebar_position:5},s="3_1_vnoiseGrad",c={unversionedId:"chapter3/3_1_vnoiseGrad",id:"chapter3/3_1_vnoiseGrad",title:"3_1_vnoiseGrad",description:"\u30b3\u30fc\u30c9 3.3, \u56f3 3.5:",source:"@site/i18n/jp/docusaurus-plugin-content-docs/current/chapter3/3_1_vnoiseGrad.md",sourceDirName:"chapter3",slug:"/chapter3/3_1_vnoiseGrad",permalink:"/MathOfRealTimeGraphics-samples/docs/chapter3/3_1_vnoiseGrad",draft:!1,tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"\u554f\u984c 3.3",permalink:"/MathOfRealTimeGraphics-samples/docs/chapter3/exercise_3_3"},next:{title:"\u554f\u984c 3.4",permalink:"/MathOfRealTimeGraphics-samples/docs/chapter3/exercise_3_4"}},u={},p=[{value:"\u30b3\u30fc\u30c9 3.3, \u56f3 3.5:",id:"\u30b3\u30fc\u30c9-33-\u56f3-35",level:2}],f={toc:p};function v(n){let{components:e,...t}=n;return(0,i.kt)("wrapper",(0,a.Z)({},f,t,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"3_1_vnoisegrad"},"3_1_vnoiseGrad"),(0,i.kt)("h2",{id:"\u30b3\u30fc\u30c9-33-\u56f3-35"},"\u30b3\u30fc\u30c9 3.3, \u56f3 3.5:"),(0,i.kt)(o.Z,{fragName:"3_1_vnoiseGrad.frag",fragCode:"#version 300 es\nprecision highp float;\nprecision highp int;\nout vec4 fragColor;\nuniform float u_time;\nuniform vec2 u_resolution;\nint channel;\n\n//start hash\nuvec3 k = uvec3(0x456789abu, 0x6789ab45u, 0x89ab4567u);\nuvec3 u = uvec3(1, 2, 3);\nconst uint UINT_MAX = 0xffffffffu;\n\nuint uhash11(uint n){\n  n ^= (n << u.x);\n  n ^= (n >> u.x);\n  n *= k.x;\n  n ^= (n << u.x);\n  return n * k.x;\n}\n\nuvec2 uhash22(uvec2 n){\n  n ^= (n.yx << u.xy);\n  n ^= (n.yx >> u.xy);\n  n *= k.xy;\n  n ^= (n.yx << u.xy);\n  return n * k.xy;\n}\n\nuvec3 uhash33(uvec3 n){\n  n ^= (n.yzx << u);\n  n ^= (n.yzx >> u);\n  n *= k;\n  n ^= (n.yzx << u);\n  return n * k;\n}\n\nfloat hash11(float p){\n  uint n = floatBitsToUint(p);\n  return float(uhash11(n)) / float(UINT_MAX);\n}\n\nfloat hash21(vec2 p){\n  uvec2 n = floatBitsToUint(p);\n  return float(uhash22(n).x) / float(UINT_MAX);\n}\n\nfloat hash31(vec3 p){\n  uvec3 n = floatBitsToUint(p);\n  return float(uhash33(n).x) / float(UINT_MAX);\n}\n\nvec2 hash22(vec2 p){\n  uvec2 n = floatBitsToUint(p);\n  return vec2(uhash22(n)) / vec2(UINT_MAX);\n}\n\nvec3 hash33(vec3 p){\n  uvec3 n = floatBitsToUint(p);\n  return vec3(uhash33(n)) / vec3(UINT_MAX);\n}\n//end hash\n\nfloat vnoise21(vec2 p){\n  vec2 n = floor(p);\n  float[4] v;\n  for (int j = 0; j < 2; j ++){\n    for (int i = 0; i < 2; i++){\n      v[i+2*j] = hash21(n + vec2(i, j));\n    }\n  }\n  vec2 f = fract(p);\n  if (channel == 0){\n    f = f * f * (3.0 -2.0 * f); // Hermite interpolation\n  } else {\n    f = f * f * f * (10.0 - 15.0 * f + 6.0 * f * f); //quintic Hermite interpolation\n  }\n  return mix(mix(v[0], v[1], f[0]), mix(v[2], v[3], f[0]), f[1]);\n}\n\nvec2 grad(vec2 p){\n  float eps = 0.001;\n  return 0.5 * (vec2(\n    vnoise21(p + vec2(eps, 0.0)) - vnoise21(p - vec2(eps, 0.0)),\n    vnoise21(p + vec2(0.0, eps)) - vnoise21(p - vec2(0.0, eps))\n  )) / eps;\n}\n\nvoid main(){\n  vec2 pos = gl_FragCoord.xy/min(u_resolution.x, u_resolution.y);\n  channel = int(gl_FragCoord.x * 2.0 / u_resolution.x);\n  pos = 3.0 * pos+u_time;\n  fragColor.rgb = vec3(dot(vec2(1), grad(pos)));\n  fragColor.a = 1.0;\n}",mdxType:"LiveGlslCodeBlock"}))}v.isMDXComponent=!0}}]);