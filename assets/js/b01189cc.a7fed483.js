"use strict";(self.webpackChunkMathOfRealTimeGraphics_samples=self.webpackChunkMathOfRealTimeGraphics_samples||[]).push([[4932],{7378:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>c,contentTitle:()=>s,default:()=>p,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var i=t(87462),o=(t(67294),t(3905)),a=t(72915);const r={sidebar_position:4},s="7_3_varyVoronoi",l={unversionedId:"chapter7/7_3_varyVoronoi",id:"chapter7/7_3_varyVoronoi",title:"7_3_varyVoronoi",description:"\u56f3 7.10:",source:"@site/i18n/jp/docusaurus-plugin-content-docs/current/chapter7/7_3_varyVoronoi.md",sourceDirName:"chapter7",slug:"/chapter7/7_3_varyVoronoi",permalink:"/MathOfRealTimeGraphics-samples/docs/chapter7/7_3_varyVoronoi",draft:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"7_2_varyDist",permalink:"/MathOfRealTimeGraphics-samples/docs/chapter7/7_2_varyDist"},next:{title:"\u554f\u984c 7.1",permalink:"/MathOfRealTimeGraphics-samples/docs/chapter7/exercise_7_1"}},c={},u=[{value:"\u56f3 7.10:",id:"\u56f3-710",level:2}],h={toc:u};function p(n){let{components:e,...t}=n;return(0,o.kt)("wrapper",(0,i.Z)({},h,t,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"7_3_varyvoronoi"},"7_3_varyVoronoi"),(0,o.kt)("h2",{id:"\u56f3-710"},"\u56f3 7.10:"),(0,o.kt)(a.Z,{fragName:"7_3_varyVoronoi.frag",fragCode:"#version 300 es\nprecision highp float;\nprecision highp int;\nout vec4 fragColor;\nuniform float u_time;\nuniform vec2 u_resolution;\nivec2 channel;\n//start hash\nuvec3 k = uvec3(0x456789abu, 0x6789ab45u, 0x89ab4567u);\nuvec3 u = uvec3(1, 2, 3);\nconst uint UINT_MAX = 0xffffffffu;\nuint uhash11(uint n){\n    n ^= (n << u.x);\n    n ^= (n >> u.x);\n    n *= k.x;\n    n ^= (n << u.x);\n    return n * k.x;\n}\nuvec2 uhash22(uvec2 n){\n    n ^= (n.yx << u.xy);\n    n ^= (n.yx >> u.xy);\n    n *= k.xy;\n    n ^= (n.yx << u.xy);\n    return n * k.xy;\n}\nuvec3 uhash33(uvec3 n){\n    n ^= (n.yzx << u);\n    n ^= (n.yzx >> u);\n    n *= k;\n    n ^= (n.yzx << u);\n    return n * k;\n}\nfloat hash11(float p){\n    uint n = floatBitsToUint(p);\n    return float(uhash11(n)) / float(UINT_MAX);\n}\nfloat hash21(vec2 p){\n    uvec2 n = floatBitsToUint(p);\n    return float(uhash22(n).x) / float(UINT_MAX);\n}\nfloat hash31(vec3 p){\n    uvec3 n = floatBitsToUint(p);\n    return float(uhash33(n).x) / float(UINT_MAX);\n}\nvec2 hash22(vec2 p){\n    uvec2 n = floatBitsToUint(p);\n    return vec2(uhash22(n)) / vec2(UINT_MAX);\n}\nvec3 hash33(vec3 p){\n    uvec3 n = floatBitsToUint(p);\n    return vec3(uhash33(n)) / vec3(UINT_MAX);\n}\n//end hash\nfloat length2(vec2 p){\n    float t = mod(u_time, 3.0);\n    p = abs(p);\n    return channel.x == 0 ? length(p):\n        channel.x == 1 ? dot(p, vec2(1.0)):\n        max(p.x, p.y);\n}\nfloat length3(vec3 p){\n    float t = mod(u_time, 3.0);\n    p = abs(p);\n    return channel.x == 0 ? length(p):\n        channel.x == 1 ? dot(p, vec3(1.0)):\n        max(max(p.x, p.y), p.z);\n}\nvec2 voronoi2(vec2 p){\n    vec2 n = floor(p + 0.5);\n    float dist = length2(vec2(1));\n    vec2 id;\n    for(float j = 0.0; j <= 2.0; j ++ ){\n        vec2 glid;\n        glid.y = n.y + sign(mod(j, 2.0) - 0.5) * ceil(j * 0.5);\n        if (abs(glid.y - p.y) - 0.5 > dist){\n            continue;\n        }\n        for(float i = -1.0; i <= 1.0; i ++ ){\n            glid.x = n.x + i;\n            vec2 jitter = hash22(glid) - 0.5;\n            if (length2(glid + jitter - p) <= dist){\n                dist = length2(glid + jitter - p);\n                id = glid;\n            }\n        }\n    }\n    return id;\n}\nvec3 voronoi3(vec3 p){\n    vec3 n = floor(p + 0.5);\n    float dist = length3(vec3(1));\n    vec3 id;\n    for(float k = 0.0; k <= 2.0; k ++ ){\n            vec3 glid;\n            glid.z = n.z + sign(mod(k, 2.0) - 0.5) * ceil(k * 0.5);\n            if (abs(glid.z - p.z) - 0.5 > dist){\n                continue;\n            }\n        for(float j = 0.0; j <= 2.0; j ++ ){\n            glid.y = n.y + sign(mod(j, 2.0) - 0.5) * ceil(j * 0.5);\n            if (abs(glid.y - p.y) - 0.5 > dist){\n                continue;\n            }\n            for(float i = -1.0; i <= 1.0; i ++ ){\n                glid.x = n.x + i;\n                vec3 jitter = hash33(glid) - 0.5;\n                if (length3(glid + jitter - p) <= dist){\n                    dist = length3(glid + jitter - p);\n                    id = glid;\n                }\n            }\n        }\n    }\n    return id;\n}\nvoid main(){\n    vec2 pos = gl_FragCoord.xy/ min(u_resolution.x, u_resolution.y);\n    channel = ivec2(vec2(3, 2) * gl_FragCoord.xy/ u_resolution.xy); \n    pos *= 10.0;\n    pos += u_time;\n    fragColor = channel.y == 0 ? vec4(hash22(voronoi2(pos)), 1, 1) : vec4(hash33(voronoi3(vec3(pos, 0.5 * u_time))), 1);\n}",mdxType:"LiveGlslCodeBlock"}))}p.isMDXComponent=!0}}]);