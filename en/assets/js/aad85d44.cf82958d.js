"use strict";(self.webpackChunkMathOfRealTimeGraphics_samples=self.webpackChunkMathOfRealTimeGraphics_samples||[]).push([[3661],{92554:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>u,toc:()=>f});var i=t(87462),a=(t(67294),t(3905)),s=t(72915);const o={sidebar_position:1},r="6_0_fdist",u={unversionedId:"chapter6/6_0_fdist",id:"chapter6/6_0_fdist",title:"6_0_fdist",description:"Code 6.1, Figure 6.1:",source:"@site/docs/chapter6/6_0_fdist.md",sourceDirName:"chapter6",slug:"/chapter6/6_0_fdist",permalink:"/MathOfRealTimeGraphics-samples/en/docs/chapter6/6_0_fdist",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Chapter 6: Cellular Noise",permalink:"/MathOfRealTimeGraphics-samples/en/docs/category/chapter-6-cellular-noise"},next:{title:"6_1_fdistImproved",permalink:"/MathOfRealTimeGraphics-samples/en/docs/chapter6/6_1_fdistImproved"}},c={},f=[{value:"Code 6.1, Figure 6.1:",id:"code-61-figure-61",level:2}],l={toc:f};function h(n){let{components:e,...t}=n;return(0,a.kt)("wrapper",(0,i.Z)({},l,t,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"6_0_fdist"},"6_0_fdist"),(0,a.kt)("h2",{id:"code-61-figure-61"},"Code 6.1, Figure 6.1:"),(0,a.kt)(s.Z,{fragName:"6_0_fdist.frag",fragCode:"#version 300 es\nprecision highp float;\nprecision highp int;\nout vec4 fragColor;\nuniform float u_time;\nuniform vec2 u_resolution;\n//start hash\nuvec3 k = uvec3(0x456789abu, 0x6789ab45u, 0x89ab4567u);\nuvec3 u = uvec3(1, 2, 3);\nconst uint UINT_MAX = 0xffffffffu;\n\nuint uhash11(uint n){\n  n ^= (n << u.x);\n  n ^= (n >> u.x);\n  n *= k.x;\n  n ^= (n << u.x);\n  return n * k.x;\n}\n\nuvec2 uhash22(uvec2 n){\n  n ^= (n.yx << u.xy);\n  n ^= (n.yx >> u.xy);\n  n *= k.xy;\n  n ^= (n.yx << u.xy);\n  return n * k.xy;\n}\n\nuvec3 uhash33(uvec3 n){\n  n ^= (n.yzx << u);\n  n ^= (n.yzx >> u);\n  n *= k;\n  n ^= (n.yzx << u);\n  return n * k;\n}\n\nfloat hash11(float p){\n  uint n = floatBitsToUint(p);\n  return float(uhash11(n)) / float(UINT_MAX);\n}\n\nfloat hash21(vec2 p){\n  uvec2 n = floatBitsToUint(p);\n  return float(uhash22(n).x) / float(UINT_MAX);\n}\n\nfloat hash31(vec3 p){\n  uvec3 n = floatBitsToUint(p);\n  return float(uhash33(n).x) / float(UINT_MAX);\n}\n\nvec2 hash22(vec2 p){\n  uvec2 n = floatBitsToUint(p);\n  return vec2(uhash22(n)) / vec2(UINT_MAX);\n}\n\nvec3 hash33(vec3 p){\n  uvec3 n = floatBitsToUint(p);\n  return vec3(uhash33(n)) / vec3(UINT_MAX);\n}\n//end hash\n\nfloat fdist(vec2 p){\n  vec2 n = floor(p + 0.5);\n  float dist = sqrt(2.0);\n  for(float j = - 2.0; j <= 2.0; j ++ ){\n    for(float i = - 2.0; i <= 2.0; i ++ ){\n      vec2 glid = n + vec2(i, j);\n      vec2 jitter = sin(u_time) * (hash22(glid) - 0.5);\n      dist = min(dist, distance(glid + jitter, p));\n    }\n  }\n  return dist;\n}\n\nvoid main(){\n  vec2 pos = gl_FragCoord.xy/ min(u_resolution.x, u_resolution.y);\n  pos *= 10.0;\n  pos += u_time;\n  fragColor = vec4(fdist(pos));\n  fragColor.a = 1.0;\n}\n",mdxType:"LiveGlslCodeBlock"}))}h.isMDXComponent=!0}}]);