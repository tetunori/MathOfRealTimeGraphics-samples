"use strict";(self.webpackChunkMathOfRealTimeGraphics_samples=self.webpackChunkMathOfRealTimeGraphics_samples||[]).push([[2157],{52390:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>s,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>l});var r=t(87462),c=(t(67294),t(3905)),o=t(72915);const a={sidebar_position:11},s="9_8_truncation",i={unversionedId:"chapter9/9_8_truncation",id:"chapter9/9_8_truncation",title:"9_8_truncation",description:"Code 9.9, Figure 9.15:",source:"@site/docs/chapter9/9_8_truncation.md",sourceDirName:"chapter9",slug:"/chapter9/9_8_truncation",permalink:"/MathOfRealTimeGraphics-samples/en/docs/chapter9/9_8_truncation",draft:!1,tags:[],version:"current",sidebarPosition:11,frontMatter:{sidebar_position:11},sidebar:"tutorialSidebar",previous:{title:"9_7_octahedron",permalink:"/MathOfRealTimeGraphics-samples/en/docs/chapter9/9_7_octahedron"},next:{title:"Exercise 9.3-1",permalink:"/MathOfRealTimeGraphics-samples/en/docs/chapter9/exercise_9_3-1"}},p={},l=[{value:"Code 9.9, Figure 9.15:",id:"code-99-figure-915",level:2}],v={toc:l};function u(e){let{components:n,...t}=e;return(0,c.kt)("wrapper",(0,r.Z)({},v,t,{components:n,mdxType:"MDXLayout"}),(0,c.kt)("h1",{id:"9_8_truncation"},"9_8_truncation"),(0,c.kt)("h2",{id:"code-99-figure-915"},"Code 9.9, Figure 9.15:"),(0,c.kt)(o.Z,{fragName:"9_8_truncation.frag",fragCode:"#version 300 es\nprecision highp float;\nprecision highp int;\nout vec4 fragColor;\nuniform float u_time;\nuniform vec2 u_resolution;\n//begin rot\nvec2 rot2(vec2 p, float t){\n    return vec2(cos(t) * p.x -sin(t) * p.y, sin(t) * p.x + cos(t) * p.y);\n}\nvec3 rotX(vec3 p, float t){\n    return vec3(p.x, rot2(p.yz, t));\n}\nvec3 rotY(vec3 p, float t){\n    return vec3(p.y, rot2(p.zx, t)).zxy;\n}\nvec3 rotZ(vec3 p, float t){\n    return vec3(rot2(p.xy, t), p.z);\n}\nvec3 euler(vec3 p, vec3 t){\n    return rotZ(rotY(rotX(p, t.x), t.y), t.z);\n}\n//end rot\nfloat sphereSDF(vec3 p, vec3 c, float r){\n    return length(p - c) - r;\n}\nfloat planeSDF(vec3 p, vec3 n, float s){\n    return dot(normalize(n), p) - s;\n}\nfloat octaSDF(vec3 p, float s){\n    return planeSDF(abs(p), vec3(1.0), s);\n}\nfloat boxSDF(vec3 p, vec3 c, vec3 d, float s){\n    p = abs(p - c);\n    return length(max(p - d, vec3(0.0))) + min(max(max(p.x - d.x, p.y - d.y), p.z - d.z), 0.0) - s;\n}\nfloat sceneSDF(vec3 p){\n    vec3 v = vec3(0.5); \n    float s = mix(1.0 / 3.0, 1.0, 0.5 * sin(u_time) + 0.5);\n    // s = 1.0;    //cube\n    // s = (sqrt(2.0) + 1.0) / 3.0;    //truncated cube\n    // s = 2.0 / 3.0;  //cuboctahedron\n    // s = 0.5;    //truncated octahedron\n    // s = 1.0 / 3.0;  //octahedron\n    float d1 = octaSDF(p,  s * length(v));\n    float d2 = boxSDF(p, vec3(0.0), v, 0.0);\n    return max(d1, d2);\n}\nvec3 gradSDF(vec3 p){\n    float eps = 0.001;\n    return normalize(vec3(\n        sceneSDF(p + vec3(eps, 0.0, 0.0)) - sceneSDF(p - vec3(eps, 0.0, 0.0)),\n        sceneSDF(p + vec3(0.0, eps, 0.0)) - sceneSDF(p - vec3(0.0, eps, 0.0)),\n        sceneSDF(p + vec3(0.0, 0.0, eps)) - sceneSDF(p - vec3(0.0, 0.0, eps))\n    ));\n}\n\nvoid main(){\n    vec2 p = (gl_FragCoord.xy * 2.0 - u_resolution) / min(u_resolution.x, u_resolution.y);\n    \n    vec3 t = vec3(u_time * 0.3);\n    vec3 cPos = euler(vec3(0.0, 0.0, 2.0), t);\n    vec3 cDir = euler(vec3(0.0, 0.0, - 1.0), t);\n    vec3 cUp = euler(vec3(0.0, 1.0, 0.0), t);\n    vec3 cSide = cross(cDir, cUp);\n    \n    float targetDepth = 1.0;\n    \n    vec3 lDir = euler(vec3(0.0, 0.0, 1.0), t);\n    \n    vec3 ray = cSide * p.x + cUp * p.y + cDir * targetDepth;\n    vec3 rPos = ray + cPos;\n    ray = normalize(ray);\n    fragColor.rgb = vec3(0.0);\n    for(int i = 0; i < 50; i ++ ){\n        if (sceneSDF(rPos) > 0.001){\n            rPos += sceneSDF(rPos) * ray;\n        } else {\n            float amb = 0.1;\n            float diff = 0.9 * max(dot(normalize(lDir), gradSDF(rPos)), 0.0);\n            vec3 col = vec3(0.0, 1.0, 1.0);\n            fragColor.rgb = col * (diff + amb);\n            break;\n        }\n    }\n    fragColor.a = 1.0;\n}",mdxType:"LiveGlslCodeBlock"}))}u.isMDXComponent=!0}}]);